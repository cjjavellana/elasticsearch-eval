---

- hosts: localhost
  connection: local
  gather_facts: False

  tasks:

    - import_tasks: ec2.yml
      vars:
        ec2_name: Elastic Search Instance
        ec2_environment: Elastic Search Evaluation
        # 3-node elastic cluster + 1 dataset loader node
        count: 4
        volume_size_gb: 300

    # es_nodes_group will be are target hosts in subsequent plays later on
    - name: Add EC2 instances to hosts
      add_host:
        name: '{{ item.public_dns_name }}'
        groups: es_nodes_group
      loop: '{{ ec2.instances }}'

    - name: Collects private dns names of the EC2 instances into the es_private_dns_names list
      set_fact:
        es_private_dns_names: "{{ es_private_dns_names | default([]) + [ item.private_dns_name | string ] }}"
      # exclude the last instance because we're going to use it as a dataset loader node
      loop: '{{ ec2.instances[0:2] }}'

    - name: Wait for SSH to come up
      delegate_to: '{{ item.public_dns_name }}'
      wait_for_connection:
        delay: 30
        timeout: 600
      loop: '{{ ec2.instances }}'

    - debug:
        msg: "EC2 Public DNS Name: {{ item.public_dns_name }}"
      loop: '{{ ec2.instances }}'

    - name: Print out the cluster private names
      debug:
        msg: "{{ es_private_dns_names | join(', ') }}"

    - name: Prepare unicast_hosts.txt
      ansible.builtin.copy:
        content: "{{ es_private_dns_names | join('\n') }}"
        dest: ./unicast_hosts.txt
      delegate_to: localhost

- name: Install Elastic Search on all 3 nodes
  hosts: es_nodes_group[0:2]
  gather_facts: False
  remote_user: ubuntu
  vars:
    elasticsearch_arch: linux-x86_64
    elasticsearch_data_dir: /opt/elasticsearch/data
    elasticsearch_log_dir: /opt/elasticsearch/log
  tasks:
    
    - name: Install Python Virtual Env
      ansible.builtin.apt:
        name: python3.12-venv
        update_cache: yes
      become: yes

    - name: Create Elastic Search Directory
      ansible.builtin.file:
        path: /opt/elasticsearch
        owner: ubuntu
        group: ubuntu
        state: directory
        mode: '0755'
      become: yes

    - name: Download Elastic Search
      ansible.builtin.get_url:
        url: 'https://artifacts.elastic.co/downloads/elasticsearch/{{ elasticsearch.version }}-{{ elasticsearch_arch }}.tar.gz'
        dest: '/opt/elasticsearch/{{ elasticsearch.version }}-{{ elasticsearch_arch }}.tar.gz'
        checksum: 'sha512:https://artifacts.elastic.co/downloads/elasticsearch/{{ elasticsearch.version }}-{{ elasticsearch_arch }}.tar.gz.sha512'

    - name: Extract Elastic Search
      ansible.builtin.unarchive:
        src: '/opt/elasticsearch/{{ elasticsearch.version }}-{{ elasticsearch_arch }}.tar.gz'
        dest: /opt/elasticsearch/
        owner: ubuntu
        group: ubuntu
        remote_src: yes

    - amazon.aws.ec2_metadata_facts:

    - debug:
        msg: 'Private DNS: {{ ansible_ec2_hostname }}'

    - name: Set cluster name
      ansible.builtin.lineinfile:
        path: '/opt/elasticsearch/{{ elasticsearch.version }}/config/elasticsearch.yml'
        regexp: '^#cluster\.name:.*$'
        line: 'cluster.name: es-evaluation'

    - name: Set node name
      ansible.builtin.lineinfile:
        path: '/opt/elasticsearch/{{ elasticsearch.version }}/config/elasticsearch.yml'
        regexp: '^#node\.name:.*$'
        line: 'node.name: {{ ansible_ec2_hostname }}'

    - name: Set data directory
      ansible.builtin.lineinfile:
        path: '/opt/elasticsearch/{{ elasticsearch.version }}/config/elasticsearch.yml'
        regexp: '^#path\.data:.*$'
        line: 'path.data: {{ elasticsearch_data_dir }}'

    - name: Set log directory
      ansible.builtin.lineinfile:
        path: '/opt/elasticsearch/{{ elasticsearch.version }}/config/elasticsearch.yml'
        regexp: '^#path\.logs:.*$'
        line: 'path.logs: {{ elasticsearch_log_dir }}'

    - name: Listen on the private IP
      ansible.builtin.lineinfile:
        path: '/opt/elasticsearch/{{ elasticsearch.version }}/config/elasticsearch.yml'
        regexp: '^#network\.host:.*$'
        line: 'network.host: {{ ansible_ec2_instance_identity_document_privateip }}'

    - name: Set discovery.seed_providers
      ansible.builtin.lineinfile:
        path: '/opt/elasticsearch/{{ elasticsearch.version }}/config/elasticsearch.yml'
        regexp: '^#discovery.seed_hosts.*$'
        line: "discovery.seed_providers: file"

    - name: Copy unicast_hosts.txt to elastic search node
      ansible.builtin.copy:
        src: unicast_hosts.txt
        dest: '/opt/elasticsearch/{{ elasticsearch.version }}/config/unicast_hosts.txt'
        mode: '0644'

    - name: Enable elastic search security settings
      ansible.builtin.blockinfile:
        path: '/opt/elasticsearch/{{ elasticsearch.version }}/config/elasticsearch.yml'
        marker: "# Ansible Managed Block (Set security settings)"
        block: |
          xpack.security.transport.ssl.enabled: true
          xpack.security.transport.ssl.verification_mode: certificate
          xpack.security.transport.ssl.client_authentication: required
          xpack.security.transport.ssl.keystore.path: elastic-certificates.p12
          xpack.security.transport.ssl.truststore.path: elastic-certificates.p12

          xpack.security.http.ssl.enabled: true
          xpack.security.http.ssl.keystore.path: http.p12

# We generate the certs in just one of the nodes
- name: Logging in to one of the nodes to generate the certificates
  hosts: es_nodes_group[0]
  gather_facts: True
  remote_user: ubuntu
  tasks:
    - amazon.aws.ec2_metadata_facts:

    - name: Set the initial master node on the first server
      ansible.builtin.blockinfile:
        path: '/opt/elasticsearch/{{ elasticsearch.version }}/config/elasticsearch.yml'
        marker: "# Ansible Managed Block (Set Initial Master Nodes)"
        block: |
          cluster.initial_master_nodes: ["{{ ansible_ec2_hostname }}"]
 
    - name: Generate the certificate authority
      ansible.builtin.expect:
        chdir: '/opt/elasticsearch/{{ elasticsearch.version }}'
        command: './bin/elasticsearch-certutil ca'
        responses:
          "Please enter the desired output file": ''
          "Enter password for": ''

    - name: Generate Cert & Private Keys
      ansible.builtin.expect:
        chdir: '/opt/elasticsearch/{{ elasticsearch.version }}'
        command: './bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12'
        responses:
          "Enter password for CA": ''
          "Please enter the desired output file": ''
          "Enter password for elastic-certificates.p12": ''

    - name: Copy generated certs to local
      ansible.builtin.fetch:
        src: '/opt/elasticsearch/{{ elasticsearch.version }}/elastic-certificates.p12'
        dest: './'
        flat: true
    
    - name: Copy generated certs to local
      ansible.builtin.fetch:
        src: '/opt/elasticsearch/{{ elasticsearch.version }}/elastic-stack-ca.p12'
        dest: './'
        flat: true

    - name: Read Private Hostnames from unicast_hosts file
      set_fact:
        es_private_dns_names: "{{ es_private_dns_names | default([]) + [ item | string ] }}"
      loop: "{{ lookup('file', 'unicast_hosts.txt').split('\n') }}"

    # Obtain cluster private IP addresses from private dns names
    - name: Private IP Addresses
      set_fact:
        es_private_ip_addrs: "{{ es_private_ip_addrs | default([]) + [ item.split('.')[0].replace('ip-', '').replace('-','.') | string ] }}"
      loop: "{{ es_private_dns_names }}"
    
    - debug:
        msg: "Private DNS2: {{ es_private_dns_names }} {{ es_private_ip_addrs }}"

    - name: Generate HTTPS Cert
      ansible.builtin.command: ./bin/elasticsearch-certutil cert --ca ./elastic-stack-ca.p12 --ca-pass "" --dns "{{ es_private_dns_names | join(',') }}" --ip "{{ es_private_ip_addrs | join(',') }}" --out http.p12 --days 512 --pass ""
      args:
        chdir: '/opt/elasticsearch/{{ elasticsearch.version }}'

    - name: Copy generated HTTPS Cert
      ansible.builtin.fetch:
        src: '/opt/elasticsearch/{{ elasticsearch.version }}/http.p12'
        dest: './'
        flat: true

    - name: Move p12 certs to config directory
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "/opt/elasticsearch/{{ elasticsearch.version }}/config/"
        remote_src: yes
      loop:
        - '/opt/elasticsearch/{{ elasticsearch.version }}/http.p12'
        - '/opt/elasticsearch/{{ elasticsearch.version }}/elastic-certificates.p12'

    - name: Start the initial master node
      ansible.builtin.shell: "nohup ./bin/elasticsearch </dev/null >/dev/null 2>&1 &"
      args:
        chdir: '/opt/elasticsearch/{{ elasticsearch.version }}'
      register: espid

    - debug:
        msg: "Master Node PID: {{ espid }}"

    - name: Wait for elastic search to boot
      ansible.builtin.wait_for:
        path: '/opt/elasticsearch/log/es-evaluation.log'
        search_regex: mode \[basic\] - valid

    - name: Set default password for user elastic
      ansible.builtin.expect:
        chdir: '/opt/elasticsearch/{{ elasticsearch.version }}'
        command: './bin/elasticsearch-reset-password -i -u elastic'
        responses:
          "Please confirm that you would like to continue": 'y'
          "Enter password for": 'elastic'
          "Re-enter password for": 'elastic'

- name: Sets up certificate in nodes 2 & 3
  hosts: es_nodes_group[1:2]
  gather_facts: False
  remote_user: ubuntu
  tasks:
    - name: Setup certificate
      ansible.builtin.copy:
        src: elastic-certificates.p12
        dest: '/opt/elasticsearch/{{ elasticsearch.version }}/config/elastic-certificates.p12'
        mode: '0644'

    - name: Setup HTTPS certificate
      ansible.builtin.copy:
        src: http.p12
        dest: '/opt/elasticsearch/{{ elasticsearch.version }}/config/http.p12'
        mode: '0644'

    - name: Start the other data nodes
      ansible.builtin.shell: "nohup ./bin/elasticsearch </dev/null >/dev/null 2>&1 &"
      args:
        chdir: '/opt/elasticsearch/{{ elasticsearch.version }}'
      register: espid

- hosts: es_nodes_group[-1]
  gather_facts: False
  remote_user: ubuntu
  tasks:

    - name: Install Python Virtual Env
      ansible.builtin.apt:
        name: python3.12-venv
        update_cache: yes
      become: yes

    - name: Create Benchmark Directory
      ansible.builtin.file:
        path: /opt/benchmark
        owner: ubuntu
        group: ubuntu
        state: directory
        mode: '0755'
      become: yes

    - name: Copy unicast_hosts.txt to the benchmark node just for reference
      ansible.builtin.copy:
        src: unicast_hosts.txt
        dest: '/opt/benchmark/unicast_hosts.txt'
        mode: '0644'

    - name: Setup certificate authority
      ansible.builtin.copy:
        src: elastic-stack-ca.p12
        dest: '/opt/benchmark/elastic-stack-ca.p12'
        mode: '0644'
 
    - name: Copy benchmark files
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: /opt/benchmark/
      with_fileglob: 
        - "benchmark/*.py"
        - "benchmark/*.txt"
        - "benchmark/*.sh"

    - name: Generate client cert
      ansible.builtin.expect: 
        chdir: '/opt/benchmark'
        command: "openssl pkcs12 -in /opt/benchmark/elastic-stack-ca.p12 -out ca.crt -clcerts -nokeys"
        responses:
          "Enter Import Password": ''
